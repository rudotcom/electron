import os
from uuid import uuid4

import telepot
from PIL import Image
from django.db import models
from django.contrib.auth.models import User
from django.urls import reverse
from django.utils import timezone
from django.utils.html import mark_safe

from Introvert import settings
from store.utils import path_and_rename


class Parameter(models.Model):
    class Meta:
        verbose_name = '–ü–∞—Ä–∞–º–µ—Ç—Ä'
        verbose_name_plural = '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã'
        ordering = ('name',)

    value = models.IntegerField(verbose_name='–ó–Ω–∞—á–µ–Ω–∏–µ')
    name = models.CharField(max_length=255, verbose_name='–ò–º—è')
    meaning = models.TextField(verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ', null=True, blank=True)

    def __str__(self):
        return self.name

    def save(self, *args, **kwargs):
        parameter[self.name] = int(self.value)
        super().save(*args, **kwargs)


class MinDimentionErrorException(Exception):
    pass


class Category(models.Model):
    class Meta:
        verbose_name = '–ì—Ä—É–ø–ø–∞'
        verbose_name_plural = '–ì—Ä—É–ø–ø—ã'
        ordering = ('id',)

    name = models.CharField(max_length=255, verbose_name='–ò–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    slug = models.SlugField(unique=True)

    def __str__(self):
        return self.name

    def get_absolute_url(self):
        return reverse('category_detail', kwargs={'slug': self.slug})


class SubCategoryManager(models.Manager):

    def get_queryset(self):
        return super().get_queryset()

    def get_subcategory_list(self):
        # models = get_model_counter('shopperbag', 'waistbag', 'backpack', 'accessory')
        # models = get_model_counter(category)
        q = self.get_queryset().annotate()
        data = [
            dict(name=c.name, url=c.get_absolute_url()) for c in q
        ]
        return data


class SubCategory(models.Model):
    class Meta:
        verbose_name = '–ü–æ–¥–≥—Ä—É–ø–ø–∞'
        verbose_name_plural = '–ü–æ–¥–≥—Ä—É–ø–ø—ã'
        ordering = ('category', 'name')

    name = models.CharField(max_length=255, verbose_name='–ü–æ–¥–≥—Ä—É–ø–ø–∞')
    category = models.ForeignKey(Category, verbose_name='–ì—Ä—É–ø–ø–∞', null=False, blank=False, default=1,
                                 on_delete=models.CASCADE)
    slug = models.SlugField(unique=True)
    objects = SubCategoryManager()
    count = models.IntegerField(null=True)

    def __str__(self):
        return "{} {}".format(self.category, self.name)

    def get_absolute_url(self):
        return reverse('subcategory_detail', kwargs={'slug': self.slug})


class RandomManager(models.Manager):
    def get_query_set(self):
        return super(RandomManager, self).get_query_set().order_by('?')


class Product(models.Model):
    class Meta:
        verbose_name = '–¢–æ–≤–∞—Ä'
        verbose_name_plural = '2. –¢–æ–≤–∞—Ä—ã'
        ordering = ('subcategory', 'title')

    PRODUCT_BIG = (1100, 3000)
    PRODUCT_CARD = (300, 400)
    PRODUCT_THUMB = (50, 50)
    MAX_IMAGE_SIZE = 4145728

    GENDER_CHOICES = (
        ('G', '–î–ª—è –≤—Å–µ—Ö'),
        ('M', '–î–ª—è –º—É–∂—á–∏–Ω'),
        ('F', '–î–ª—è –∂–µ–Ω—â–∏–Ω'),
    )

    category = models.ForeignKey(Category, verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è', on_delete=models.CASCADE)
    subcategory = models.ForeignKey(SubCategory, verbose_name='–ü–æ–¥–≥—Ä—É–ø–ø–∞', null=False, blank=False, default=1,
                                    on_delete=models.CASCADE)
    title = models.CharField(max_length=255, verbose_name='–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ')
    slug = models.SlugField(unique=True)
    image = models.ImageField(verbose_name='–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', upload_to=path_and_rename)
    description = models.TextField(verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ', null=True)
    care = models.TextField(verbose_name='–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Ö–æ–¥—É', null=True, blank=True)
    price = models.DecimalField(max_digits=9, decimal_places=2, verbose_name='–¶–µ–Ω–∞')
    price_discount = models.DecimalField(max_digits=9, decimal_places=2, verbose_name='–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π',
                                         null=True, blank=True)
    length = models.IntegerField(verbose_name='–î–ª–∏–Ω–∞, —Å–º', null=True, blank=True)
    width = models.IntegerField(verbose_name='–®–∏—Ä–∏–Ω–∞, —Å–º', null=True, blank=True)
    height = models.IntegerField(verbose_name='–í—ã—Å–æ—Ç–∞, —Å–º', null=True, blank=True)
    weight = models.IntegerField(verbose_name='–í–µ—Å, –≥—Ä', null=True, blank=True)
    material = models.CharField(verbose_name='–ú–∞—Ç–µ—Ä–∏–∞–ª', max_length=20, null=True, blank=True)
    color = models.CharField(verbose_name='–¶–≤–µ—Ç', max_length=20, null=True, blank=True)
    bestseller = models.BooleanField(verbose_name='–•–∏—Ç', default=False)
    new = models.BooleanField(verbose_name='–ù–æ–≤–∏–Ω–∫–∞', default=False)
    gift = models.BooleanField(verbose_name='–ü–æ–¥–∞—Ä–æ–∫', blank=False, null=False, default=False)
    gender = models.CharField(verbose_name='–ü–æ–ª', max_length=1, blank=False, null=False, default='G',
                              choices=GENDER_CHOICES)
    quantity = models.PositiveIntegerField(verbose_name='–ù–∞–ª–∏—á–∏–µ', default=0)
    display = models.BooleanField(verbose_name='–í—ã—Å—Ç–∞–≤–ª—è—Ç—å', default=True,
                                  blank=False, null=False)
    limited = models.BooleanField(verbose_name='–õ–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–ø—É—Å–∫', default=False, blank=False, null=False)
    date_added = models.DateTimeField(auto_now_add=True, verbose_name='–î–æ–±–∞–≤–ª–µ–Ω')
    visits = models.IntegerField(default=0, verbose_name='üëÅ', help_text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤')
    last_visit = models.DateTimeField(blank=True, null=True, verbose_name='–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω')
    objects = models.Manager()  # The default manager.
    randoms = RandomManager()  # The random-specific manager.

    def __str__(self):
        return self.title

    def get_absolute_url(self):
        return reverse('product_detail', kwargs={'slug': self.slug})

    def save(self, *args, **kwargs):
        image = self.image
        img = Image.open(image)
        min_width, min_height = self.PRODUCT_CARD

        if img.height < min_height or img.width < min_width:
            raise MinDimentionErrorException('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—å—à–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ {}x{}'.format(
                *self.PRODUCT_CARD))
        else:
            ext = image.name.split('.')[-1]
            filename = f'{self.category.slug}_{self.slug}.{ext}'

            img.thumbnail(self.PRODUCT_BIG, Image.ANTIALIAS)
            img.save(os.path.join(settings.MEDIA_ROOT, filename), 'JPEG', quality=95)

            img.thumbnail(self.PRODUCT_CARD, Image.ANTIALIAS)
            img.save(os.path.join(settings.MEDIA_ROOT, 'card', filename), 'JPEG', quality=85)

            img.thumbnail(self.PRODUCT_THUMB)
            img.save(os.path.join(settings.MEDIA_ROOT, 'thumb', filename))

        super().save(*args, **kwargs)

    def image_thumb(self):
        return mark_safe('<img src="/media/thumb/%s">' % self.image)

    image_thumb.short_description = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'


class ProductImage(models.Model):
    class Meta:
        verbose_name = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'
        verbose_name_plural = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞'

    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    image = models.ImageField()

    def __str__(self):
        return self.product.title

    def save(self, *args, **kwargs):
        image = self.image
        img = Image.open(image)

        ext = image.name.split('.')[-1]
        filename = '{}.{}'.format(uuid4().hex, ext)
        image.name = filename
        super().save(*args, **kwargs)
        os.remove(os.path.join(settings.MEDIA_ROOT, filename))

        img.thumbnail(Product.PRODUCT_BIG, Image.ANTIALIAS)
        img.save(os.path.join(settings.MEDIA_ROOT, filename), 'JPEG', quality=85)

        img.thumbnail(Product.PRODUCT_CARD, Image.ANTIALIAS)
        img.save(os.path.join(settings.MEDIA_ROOT, 'card', filename), 'JPEG', quality=85)

        img.thumbnail(Product.PRODUCT_THUMB)
        img.save(os.path.join(settings.MEDIA_ROOT, 'thumb', filename))

    def image_thumb(self):
        return mark_safe('<img src="/media/thumb/%s" height="50" />' % self.image)

    image_thumb.short_description = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'


class Customer(models.Model):
    class Meta:
        verbose_name = '–°–µ—Å—Å–∏—è'
        verbose_name_plural = '[ –°–µ—Å—Å–∏–∏ ]'

    user = models.ForeignKey(User, null=True, blank=True, on_delete=models.CASCADE)
    orders = models.ManyToManyField('Order', verbose_name='–ó–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞', related_name='related_order')
    session = models.CharField(max_length=200, null=True, blank=True, verbose_name='–°–µ—Å—Å–∏—è –∫–ª–∏–µ–Ω—Ç–∞')
    created = models.DateTimeField(auto_now=True, verbose_name='–î–∞—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞')

    def __str__(self):
        if self.user:
            name = f'{self.user.username} [ {self.user.email} ]'
        else:
            name = f"–ê–Ω–æ–Ω–∏–º {self.session[0:5]}..."
        return name


class OrderProduct(models.Model):
    class Meta:
        verbose_name = '–¢–æ–≤–∞—Ä –∑–∞–∫–∞–∑–∞'
        verbose_name_plural = '–¢–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞'

    order = models.ForeignKey('Order', verbose_name='–ö–æ—Ä–∑–∏–Ω–∞', on_delete=models.CASCADE,
                              related_name='related_products')
    product = models.ForeignKey(Product, verbose_name='–¢–æ–≤–∞—Ä', on_delete=models.CASCADE)
    qty = models.PositiveIntegerField(default=1, verbose_name='—à—Ç')
    final_price = models.DecimalField(max_digits=9, decimal_places=2, verbose_name='–û–±—â–∞—è —Ü–µ–Ω–∞')

    def __str__(self):
        return self.product.title

    def save(self, *args, **kwargs):
        price = self.product.price_discount if self.product.price_discount else self.product.price
        self.final_price = self.qty * price
        super().save(*args, **kwargs)

    def image_thumb(self):
        return mark_safe('<img src="/media/thumb/%s" width="50" height="50" />' % self.product.image)

    image_thumb.short_description = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'


class ActiveOrderManager(models.Manager):
    def get_queryset(self):
        return super(ActiveOrderManager, self).get_queryset().exclude(status='cart')


class CartManager(models.Manager):
    def get_queryset(self):
        return super(CartManager, self).get_queryset().filter(status='cart')


class Order(models.Model):
    class Meta:
        verbose_name = '–ó–∞–∫–∞–∑'
        verbose_name_plural = '1. –ó–∞–∫–∞–∑—ã'

    STATUS_CART = 'cart'
    STATUS_NEW = 'new'
    STATUS_IN_PROGRESS = 'in_progress'
    STATUS_READY = 'is_ready'
    STATUS_SHIPPED = 'shipped'
    STATUS_DELIVERED = 'delivered'
    STATUS_RECEIVED = 'received'
    STATUS_CANCELED = 'canceled'
    STATUS_RETURN = 'return'

    DELIVERY_TYPE_SELF = 'self'
    DELIVERY_TYPE_CDEKSPB = 'delivery_cdekspb'
    DELIVERY_TYPE_SPB = 'delivery_spb'
    DELIVERY_TYPE_RU = 'delivery_ru'
    DELIVERY_TYPE_WORLD = 'delivery_world'

    PAYMENT_TYPE0 = 'cash_card'
    PAYMENT_TYPE1 = 'bankcard'
    PAYMENT_TYPE2 = 'wallet'

    STATUS_CHOICES = (
        (STATUS_CART, '–ö–æ—Ä–∑–∏–Ω–∞'),
        (STATUS_NEW, '–û—Ñ–æ—Ä–º–ª–µ–Ω'),
        (STATUS_IN_PROGRESS, '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'),
        (STATUS_READY, '–ì–æ—Ç–æ–≤'),
        (STATUS_SHIPPED, '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω'),
        (STATUS_DELIVERED, '–î–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –º–µ—Å—Ç–æ –≤—ã–¥–∞—á–∏'),
        (STATUS_RECEIVED, '–ü–æ–ª—É—á–µ–Ω'),
        (STATUS_RETURN, '–í–æ–∑–≤—Ä–∞—Ç'),
        (STATUS_CANCELED, '–û—Ç–º–µ–Ω–µ–Ω'),
    )

    DELIVERY_TYPE_CHOICES = (
        (DELIVERY_TYPE_SELF, '–°–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)'),
        (DELIVERY_TYPE_CDEKSPB, '–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ –°–î–≠–ö –ø–æ –°–ü–±'),
        (DELIVERY_TYPE_SPB, '–ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –°–ü–±'),
        (DELIVERY_TYPE_RU, '–ü–æ—á—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –†–æ—Å—Å–∏–∏'),
        (DELIVERY_TYPE_WORLD, '–ü–æ—á—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞ —Ä—É–±–µ–∂'),
    )

    PAYMENT_CHOICES = (
        (PAYMENT_TYPE0, '–ù–∞–ª–∏—á–Ω—ã–µ –∏–ª–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –≤ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π'),
        (PAYMENT_TYPE1, '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –æ–Ω–ª–∞–π–Ω'),
        (PAYMENT_TYPE2, 'Kiwi –∫–æ—à–µ–ª—ë–∫ / Paypal'),
    )

    # user = models.ForeignKey(User, verbose_name='–ê–≤—Ç–æ—Ä', related_name='related_orders', on_delete=models.CASCADE)
    owner = models.ForeignKey(Customer, null=True, verbose_name='–ü–æ–∫—É–ø–∞—Ç–µ–ª—å', on_delete=models.CASCADE)
    products = models.ManyToManyField(OrderProduct, blank=True, related_name='related_cart')
    total_products = models.PositiveIntegerField(verbose_name='–¢–æ–≤–∞—Ä—ã', default=0)
    total_price_net = models.DecimalField(max_digits=9, default=0, decimal_places=2, verbose_name='–°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤')
    total_price_gross = models.DecimalField(max_digits=9, default=0, decimal_places=2, verbose_name='–û–±—â–∞—è —Å—É–º–º–∞')
    gift = models.ForeignKey(Product, null=True, verbose_name='–ü–æ–¥–∞—Ä–æ–∫', on_delete=models.DO_NOTHING)
    status = models.CharField(
        max_length=100,
        verbose_name='–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞',
        choices=STATUS_CHOICES,
        default=STATUS_CART
    )
    delivery_type = models.CharField(
        max_length=100,
        verbose_name='–¢–∏–ø –∑–∞–∫–∞–∑–∞',
        choices=DELIVERY_TYPE_CHOICES,
        null=True,
        default=None
    )
    delivery_cost = models.DecimalField(max_digits=9, decimal_places=2, default=0, verbose_name='–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏')
    payment_type = models.CharField(
        max_length=100,
        verbose_name='–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã',
        choices=PAYMENT_CHOICES,
        null=True,
        default=None,
    )
    payment_id = models.CharField(max_length=50, null=True, default=None, verbose_name='id –ø–ª–∞—Ç–µ–∂–∞ –≤ –Ækassa')
    comment = models.TextField(verbose_name='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É', null=True, blank=True)
    remark = models.CharField(max_length=255, verbose_name='–ü—Ä–∏–º–µ—á–∞–Ω–∏—è –æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞',
                              null=True, blank=True, help_text='–°–ª—É–∂–µ–±–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è, –∫–ª–∏–µ–Ω—Ç—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')
    created_at = models.DateTimeField(default=timezone.now, verbose_name='–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞')
    is_paid = models.BooleanField(default=False, verbose_name='–û–ø–ª–∞—á–µ–Ω')  # –æ–ø–ª–∞—á–µ–Ω –ª–∏ –∑–∞–∫–∞–∑
    shipped_date = models.DateTimeField(blank=True, null=True)
    tracking = models.CharField(max_length=50, verbose_name='–¢—Ä–µ–∫–∏–Ω–≥ –Ω–æ–º–µ—Ä', null=True, blank=True)

    first_name = models.CharField(max_length=50, verbose_name='–ò–º—è', blank=True)
    last_name = models.CharField(max_length=50, verbose_name='–§–∞–º–∏–ª–∏—è', blank=True)
    patronymic = models.CharField(max_length=50, verbose_name='–û—Ç—á–µ—Å—Ç–≤–æ', blank=True)
    phone = models.CharField(max_length=20, verbose_name='–¢–µ–ª–µ—Ñ–æ–Ω', blank=True)
    settlement = models.CharField(max_length=100, verbose_name='–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç', blank=True)
    address = models.CharField(max_length=1024, verbose_name='–ê–¥—Ä–µ—Å', blank=True)
    postal_code = models.CharField(max_length=30, verbose_name='–ò–Ω–¥–µ–∫—Å', blank=True)
    orders = ActiveOrderManager()
    carts = CartManager()

    def __str__(self):
        return \
            '–ó–∞–∫–∞–∑: {}. {} {} {}'.format(
                str(self.id), self.last_name, self.first_name, self.phone
            )

    def get_fio(self):
        return f'{self.last_name} {self.first_name[0:1]}.{self.patronymic[0:1]}'

    get_fio.short_description = '–§.–ò.–û.'

    def save(self, *args, **kwargs):
        free_gift = get_parameter('FREE_GIFT')
        free_delivery = get_parameter('FREE_DELIVERY')

        # –ï—Å–ª–∏ —Å—É–º–º–∞ –º–µ–Ω—å—à–µ –±–æ–Ω—É—Å–Ω–æ–π, —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫
        if self.total_price_net < free_gift:
            self.gift = None

        # –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
        if self.delivery_type == self.DELIVERY_TYPE_SELF:
            self.delivery_cost = 0
        elif self.delivery_type == self.DELIVERY_TYPE_SPB:  # spb
            if self.total_price_net < free_delivery:
                delivery_courier_cost = int(Parameter.objects.get(name='DELIVERY_COURIER_COST').value)
                self.delivery_cost = delivery_courier_cost
            else:
                self.delivery_cost = 0
        elif self.delivery_type == self.DELIVERY_TYPE_CDEKSPB:  # CDEK spb
            if self.total_price_net < free_delivery:
                delivery_cdek_cost = int(Parameter.objects.get(name='DELIVERY_CDEK_COST').value)
                self.delivery_cost = delivery_cdek_cost
            else:
                self.delivery_cost = 0
        elif self.delivery_type == self.DELIVERY_TYPE_RU:  # RU
            if self.total_price_net < free_delivery:
                delivery_ru_cost = int(Parameter.objects.get(name='DELIVERY_RU_COST').value)
                self.delivery_cost = delivery_ru_cost
            else:
                self.delivery_cost = 0
        elif self.delivery_type == self.DELIVERY_TYPE_WORLD:  # World
            delivery_world_cost = int(Parameter.objects.get(name='DELIVERY_WORLD_COST').value)
            self.delivery_cost = delivery_world_cost

        # –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É –≤ –∫–æ—Ä–∑–∏–Ω–µ
        if self.id and self.products.count():
            cart_data = self.products.aggregate(models.Sum('final_price'), models.Count('id'))
            self.total_price_net = cart_data.get('final_price__sum')
            self.total_products = cart_data['id__count']
            self.total_price_gross = self.total_price_net + self.delivery_cost
        else:
            self.total_price_net = 0
            self.total_price_gross = 0
            self.total_products = 0
            self.delivery_type = None
            self.delivery_cost = 0

        super().save(*args, **kwargs)

    @staticmethod
    def send_telegram(text):
        group_id = get_parameter('TELEGRAM_GROUP')
        telegram_token = os.getenv('telegram_token')
        telegram_bot = telepot.Bot(telegram_token)  # token
        telegram_bot.sendMessage(group_id, text, parse_mode="Markdown")


class Article(models.Model):
    class Meta:
        verbose_name = '–°—Ç—Ä–∞–Ω–∏—Ü–∞'
        verbose_name_plural = '–°—Ç—Ä–∞–Ω–∏—Ü—ã'
        ordering = ('id',)

    title = models.CharField(max_length=255, verbose_name='–ó–∞–≥–æ–ª–æ–≤–æ–∫')
    name = models.CharField(max_length=50, verbose_name='–ü—É–Ω–∫—Ç –º–µ–Ω—é', null=False, blank=False)
    slug = models.SlugField(unique=True, null=False)
    content = models.TextField(verbose_name='–¢–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã', null=True)

    def get_absolute_url(self):
        return reverse('article', kwargs={'slug': self.slug})

    def __str__(self):
        return self.title


def get_parameter(name):
    return int(Parameter.objects.get(name=name).value)


parameter = {
    'FREE_GIFT': get_parameter('FREE_GIFT'),
    'FREE_DELIVERY': get_parameter('FREE_DELIVERY'),
    'DELIVERY_COURIER_COST': get_parameter('DELIVERY_COURIER_COST'),
    'DELIVERY_CDEK_COST': get_parameter('DELIVERY_CDEK_COST'),
    'DELIVERY_RU_COST': get_parameter('DELIVERY_RU_COST'),
    'DELIVERY_WORLD_COST': get_parameter('DELIVERY_WORLD_COST'),
}
