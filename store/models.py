from PIL import Image
from django.db import models
from django.contrib.auth import get_user_model
from django.urls import reverse
from django.utils import timezone
from django.utils.html import mark_safe

User = get_user_model()
FREE_DELIVERY = 2500  # –°—É–º–º–∞, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–§ –±–µ—Å–ø–ª–∞—Ç–Ω–∞
FREE_GIFT = 800  # –°—É–º–º–∞, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫
DELIVERY_CDEK_COST = 300  # –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫ –í–∞–º –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ –°–î–≠–ö (–ø–æ –°–ü–±)
DELIVERY_COURIER_COST = 450  # –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –∫—É—Ä—å–µ—Ä–æ–º –ª–∏—á–Ω–æ –≤ —Ä—É–∫–∏, –ø–æ –≥–æ—Ä–æ–¥—É –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—É
DELIVERY_RU_COST = 300  # –í –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –†–æ—Å—Å–∏–∏, –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –ø–æ—á—Ç—ã, —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ 300‚ÇΩ
DELIVERY_WORLD_COST = 900  # –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –∞–≤–∏–∞ –ø–æ—á—Ç–æ–π –ø–æ –º–∏—Ä—É: 900‚ÇΩ.


class MinDimentionErrorException(Exception):
    pass


class MaxDimentionErrorException(Exception):
    pass


class Category(models.Model):

    class Meta:
        verbose_name = '–ì—Ä—É–ø–ø–∞'
        verbose_name_plural = '[ –ì—Ä—É–ø–ø—ã ]'
        ordering = ('id',)

    name = models.CharField(max_length=255, verbose_name='–ò–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    slug = models.SlugField(unique=True)

    def __str__(self):
        return self.name

    def get_absolute_url(self):
        return reverse('category_detail', kwargs={'slug': self.slug})


class SubCategoryManager(models.Manager):

    def get_queryset(self):
        return super().get_queryset()

    def get_subcategory_list(self):
        # models = get_model_counter('shopperbag', 'waistbag', 'backpack', 'accessory')
        # models = get_model_counter(category)
        q = self.get_queryset().annotate()
        data = [
            dict(name=c.name, url=c.get_absolute_url()) for c in q
        ]
        return data


class SubCategory(models.Model):

    class Meta:
        verbose_name = '–ü–æ–¥–≥—Ä—É–ø–ø–∞'
        verbose_name_plural = '[ –ü–æ–¥–≥—Ä—É–ø–ø—ã ]'
        ordering = ('category', 'name')

    name = models.CharField(max_length=255, verbose_name='–ü–æ–¥–≥—Ä—É–ø–ø–∞')
    category = models.ForeignKey(Category, verbose_name='–ì—Ä—É–ø–ø–∞', null=False, blank=False, default=1,
                                 on_delete=models.CASCADE)
    slug = models.SlugField(unique=True)
    objects = SubCategoryManager()

    def __str__(self):
        return "{} {}".format(self.category, self.name)

    def get_absolute_url(self):
        return reverse('subcategory_detail', kwargs={'slug': self.slug})


class Product(models.Model):

    class Meta:
        verbose_name = '–¢–æ–≤–∞—Ä'
        verbose_name_plural = '[ 2. –¢–æ–≤–∞—Ä—ã ]'
        ordering = ('subcategory', 'title')

    MIN_DIMENSIONS = (400, 400)
    MAX_DIMENSIONS = (4500, 4500)
    MAX_IMAGE_SIZE = 4145728

    GENDER_CHOICES = (
        ('G', '–î–ª—è –≤—Å–µ—Ö'),
        ('M', '–î–ª—è –º—É–∂—á–∏–Ω'),
        ('F', '–î–ª—è –∂–µ–Ω—â–∏–Ω'),
    )

    category = models.ForeignKey(Category, verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è', on_delete=models.CASCADE)
    subcategory = models.ForeignKey(SubCategory, verbose_name='–ü–æ–¥–≥—Ä—É–ø–ø–∞', null=False, blank=False, default=1,
                                    on_delete=models.CASCADE)
    title = models.CharField(max_length=255, verbose_name='–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ')
    slug = models.SlugField(unique=True)
    image = models.ImageField(verbose_name='–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
    description = models.TextField(verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ', null=True)
    care = models.TextField(verbose_name='–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Ö–æ–¥—É', null=True, blank=True)
    price = models.DecimalField(max_digits=9, decimal_places=2, verbose_name='–¶–µ–Ω–∞')
    price_discount = models.DecimalField(max_digits=9, decimal_places=2, verbose_name='–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π',
                                         null=True, blank=True)
    length = models.IntegerField(verbose_name='–î–ª–∏–Ω–∞, —Å–º', null=True, blank=True)
    width = models.IntegerField(verbose_name='–®–∏—Ä–∏–Ω–∞, —Å–º', null=True, blank=True)
    height = models.IntegerField(verbose_name='–í—ã—Å–æ—Ç–∞, —Å–º', null=True, blank=True)
    weight = models.IntegerField(verbose_name='–í–µ—Å, –≥—Ä', null=True, blank=True)
    material = models.CharField(verbose_name='–ú–∞—Ç–µ—Ä–∏–∞–ª', max_length=20, null=True, blank=True)
    color = models.CharField(verbose_name='–¶–≤–µ—Ç', max_length=20, null=True, blank=True)
    bestseller = models.BooleanField(verbose_name='–•–∏—Ç', default=False)
    new = models.BooleanField(verbose_name='–ù–æ–≤–∏–Ω–∫–∞', default=False)
    gift = models.BooleanField(verbose_name='–ü–æ–¥–∞—Ä–æ–∫', blank=False, null=False, default=False)
    gender = models.CharField(verbose_name='–ü–æ–ª', max_length=1, blank=False, null=False, default='G',
                              choices=GENDER_CHOICES)
    quantity = models.PositiveIntegerField(verbose_name='–ù–∞–ª–∏—á–∏–µ', default=0)
    display = models.BooleanField(verbose_name='–í—ã—Å—Ç–∞–≤–ª—è—Ç—å', default=True,
                                  blank=False, null=False)
    limited = models.BooleanField(verbose_name='–õ–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–ø—É—Å–∫', default=False, blank=False, null=False)
    date_added = models.DateTimeField(auto_now_add=True, verbose_name='–î–æ–±–∞–≤–ª–µ–Ω')
    visits = models.IntegerField(default=0, verbose_name='üëÅ', help_text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤')
    last_visit = models.DateTimeField(blank=True, null=True, verbose_name='–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω')

    def __str__(self):
        return self.title

    def get_absolute_url(self):
        return reverse('product_detail', kwargs={'slug': self.slug})

    def save(self, *args, **kwargs):
        image = self.image
        img = Image.open(image)
        min_width, min_height = self.MIN_DIMENSIONS
        max_width, max_height = self.MAX_DIMENSIONS

        if img.height < min_height or img.width < min_width:
            raise MinDimentionErrorException('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—å—à–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ {}x{}'.format(
                *self.MIN_DIMENSIONS))
        if img.height > max_height or img.width > max_width:
            raise MaxDimentionErrorException('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–ª—å—à–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ {}x{}'.format(
                *self.MAX_DIMENSIONS))
        super().save(*args, **kwargs)

    def image_tag(self):
        return mark_safe('<img src="/media/%s" height="50" />' % self.image)

    image_tag.short_description = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'


class ProductImage(models.Model):

    class Meta:
        verbose_name = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'
        verbose_name_plural = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞'

    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    image = models.ImageField()

    def __str__(self):
        return self.product.title

    def image_tag(self):
        return mark_safe('<img src="/media/%s" height="50" />' % self.image)

    image_tag.short_description = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'


class Customer(models.Model):

    class Meta:
        verbose_name = '–°–µ—Å—Å–∏—è'
        verbose_name_plural = '[ –°–µ—Å—Å–∏–∏ ]'

    user = models.ForeignKey(User, null=True, blank=True, on_delete=models.CASCADE)
    orders = models.ManyToManyField('Order', verbose_name='–ó–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞', related_name='related_order')
    session = models.CharField(max_length=200, null=True, blank=True, verbose_name='–°–µ—Å—Å–∏—è –∫–ª–∏–µ–Ω—Ç–∞')
    created = models.DateTimeField(auto_now=True, verbose_name='–î–∞—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞')

    def __str__(self):
        if self.user:
            name = f'{self.user.username} [ {self.user.email} ]'
        else:
            name = f"–ê–Ω–æ–Ω–∏–º {self.session[0:5]}..."
        return name


class OrderProduct(models.Model):

    class Meta:
        verbose_name = '–¢–æ–≤–∞—Ä –∑–∞–∫–∞–∑–∞'
        verbose_name_plural = '–¢–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞'

    order = models.ForeignKey('Order', verbose_name='–ö–æ—Ä–∑–∏–Ω–∞', on_delete=models.CASCADE,
                              related_name='related_products')
    product = models.ForeignKey(Product, verbose_name='–¢–æ–≤–∞—Ä', on_delete=models.CASCADE)
    qty = models.PositiveIntegerField(default=1, verbose_name='—à—Ç')
    final_price = models.DecimalField(max_digits=9, decimal_places=2, verbose_name='–û–±—â–∞—è —Ü–µ–Ω–∞')

    def __str__(self):
        return self.product.title

    def save(self, *args, **kwargs):
        price = self.product.price_discount if self.product.price_discount else self.product.price
        self.final_price = self.qty * price
        super().save(*args, **kwargs)

    def image_tag(self):
        return mark_safe('<img src="/media/%s" width="50" height="50" />' % self.product.image)

    image_tag.short_description = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'


class Order(models.Model):

    class Meta:
        verbose_name = '–ó–∞–∫–∞–∑'
        verbose_name_plural = '[ 1. –ó–∞–∫–∞–∑—ã ]'

    STATUS_CART = 'cart'
    STATUS_NEW = 'new'
    STATUS_IN_PROGRESS = 'in_progress'
    STATUS_READY = 'is_ready'
    STATUS_SHIPPED = 'shipped'
    STATUS_DELIVERED = 'delivered'
    STATUS_RECEIVED = 'received'
    STATUS_CANCELED = 'canceled'
    STATUS_RETURN = 'return'

    DELIVERY_TYPE_SELF = 'self'
    DELIVERY_TYPE_CDEKSPB = 'delivery_cdekspb'
    DELIVERY_TYPE_SPB = 'delivery_spb'
    DELIVERY_TYPE_RU = 'delivery_ru'
    DELIVERY_TYPE_WORLD = 'delivery_world'

    PAYMENT_TYPE0 = 'cash_card'
    PAYMENT_TYPE1 = 'bankcard'
    PAYMENT_TYPE2 = 'kiwi'

    STATUS_CHOICES = (
        (STATUS_CART, '–ö–æ—Ä–∑–∏–Ω–∞'),
        (STATUS_NEW, '–û—Ñ–æ—Ä–º–ª–µ–Ω'),
        (STATUS_IN_PROGRESS, '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'),
        (STATUS_READY, '–ì–æ—Ç–æ–≤'),
        (STATUS_SHIPPED, '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω'),
        (STATUS_DELIVERED, '–î–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –º–µ—Å—Ç–æ –≤—ã–¥–∞—á–∏'),
        (STATUS_RECEIVED, '–ü–æ–ª—É—á–µ–Ω'),
        (STATUS_RETURN, '–í–æ–∑–≤—Ä–∞—Ç'),
        (STATUS_CANCELED, '–û—Ç–º–µ–Ω–µ–Ω'),
    )

    DELIVERY_TYPE_CHOICES = (
        (DELIVERY_TYPE_SELF, '–°–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)'),
        (DELIVERY_TYPE_CDEKSPB, '–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ –°–î–≠–ö –ø–æ –°–ü–±'),
        (DELIVERY_TYPE_SPB, '–ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –°–ü–±'),
        (DELIVERY_TYPE_RU, '–ü–æ—á—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –†–æ—Å—Å–∏–∏'),
        (DELIVERY_TYPE_WORLD, '–ü–æ—á—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞ —Ä—É–±–µ–∂'),
    )

    PAYMENT_CHOICES = (
        (PAYMENT_TYPE0, '–ù–∞–ª–∏—á–Ω—ã–µ –∏–ª–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –≤ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π'),
        (PAYMENT_TYPE1, '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –æ–Ω–ª–∞–π–Ω'),
        (PAYMENT_TYPE2, 'Kiwi –∫–æ—à–µ–ª—ë–∫ / Paypal'),
    )

    # user = models.ForeignKey(User, verbose_name='–ê–≤—Ç–æ—Ä', related_name='related_orders', on_delete=models.CASCADE)
    owner = models.ForeignKey(Customer, null=True, verbose_name='–ü–æ–∫—É–ø–∞—Ç–µ–ª—å', on_delete=models.CASCADE)
    products = models.ManyToManyField(OrderProduct, blank=True, related_name='related_cart')
    total_products = models.PositiveIntegerField(verbose_name='–¢–æ–≤–∞—Ä—ã', default=0)
    final_price = models.DecimalField(max_digits=9, default=0, decimal_places=2, verbose_name='–û–±—â–∞—è —Å—É–º–º–∞')
    gift = models.ForeignKey(Product, null=True, verbose_name='–ü–æ–¥–∞—Ä–æ–∫', on_delete=models.DO_NOTHING)

    status = models.CharField(
        max_length=100,
        verbose_name='–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞',
        choices=STATUS_CHOICES,
        default=STATUS_CART
    )
    delivery_type = models.CharField(
        max_length=100,
        verbose_name='–¢–∏–ø –∑–∞–∫–∞–∑–∞',
        choices=DELIVERY_TYPE_CHOICES,
        null=True,
        default=None
    )
    delivery_cost = models.DecimalField(max_digits=9, decimal_places=2, default=0, verbose_name='–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏')
    payment_type = models.CharField(
        max_length=100,
        verbose_name='–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã',
        choices=PAYMENT_CHOICES,
        null=True,
        default=None
    )
    comment = models.TextField(verbose_name='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É', null=True, blank=True)
    remark = models.CharField(max_length=255, verbose_name='–ü—Ä–∏–º–µ—á–∞–Ω–∏—è –æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞',
                              null=True, blank=True, help_text='–°–ª—É–∂–µ–±–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è, –∫–ª–∏–µ–Ω—Ç—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')
    created_at = models.DateTimeField(default=timezone.now, verbose_name='–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞')
    is_paid = models.BooleanField(default=False, verbose_name='–û–ø–ª–∞—á–µ–Ω')  # –æ–ø–ª–∞—á–µ–Ω –ª–∏ –∑–∞–∫–∞–∑
    shipped_date = models.DateTimeField(blank=True, null=True)
    tracking = models.CharField(max_length=50, verbose_name='–¢—Ä–µ–∫–∏–Ω–≥ –Ω–æ–º–µ—Ä', null=True, blank=True)

    first_name = models.CharField(max_length=50, verbose_name='–ò–º—è', blank=True)
    last_name = models.CharField(max_length=50, verbose_name='–§–∞–º–∏–ª–∏—è', blank=True)
    patronymic = models.CharField(max_length=50, verbose_name='–û—Ç—á–µ—Å—Ç–≤–æ', blank=True)
    phone = models.CharField(max_length=20, verbose_name='–¢–µ–ª–µ—Ñ–æ–Ω', blank=True)
    settlement = models.CharField(max_length=100, verbose_name='–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç', blank=True)
    address = models.CharField(max_length=1024, verbose_name='–ê–¥—Ä–µ—Å', blank=True)
    postal_code = models.CharField(max_length=30, verbose_name='–ò–Ω–¥–µ–∫—Å', blank=True)

    def __str__(self):
        return \
            '–ó–∞–∫–∞–∑: {}. {} {} {}'.format(
                str(self.id), self.last_name, self.first_name, self.phone
            )

    def get_fio(self):
        return f'{self.last_name} {self.first_name[0:1]}.{self.patronymic[0:1]}'
    get_fio.short_description = '–§.–ò.–û.'

    def save(self, *args, **kwargs):
        # –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É –≤ –∫–æ—Ä–∑–∏–Ω–µ
        if self.id:
            cart_data = self.products.aggregate(models.Sum('final_price'), models.Count('id'))
            if cart_data.get('final_price__sum'):
                self.final_price = cart_data['final_price__sum'] + self.delivery_cost
            else:
                self.final_price = 0
            self.total_products = cart_data['id__count']
        else:
            self.final_price = 0
            self.total_products = 0

        """
        –ï—Å–ª–∏ —Å—É–º–º–∞ –º–µ–Ω—å—à–µ –±–æ–Ω—É—Å–Ω–æ–π, —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫
        –ï—Å–ª–∏ –±–æ–ª—å—à–µ –∏ –ø–æ–¥–∞—Ä–∫–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ—Ç, –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø–æ–¥–∞—Ä–æ–∫ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –≤ —è—á–µ–π–∫—É order.gift
        """
        if self.final_price < FREE_GIFT:
            self.gift = None
        # elif not self.gift:
        #     # –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ, —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ 1 –∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –≤ –∑–∞–∫–∞–∑–µ
        #     for order_product in self.products.all():
        #         if order_product.product.gift:
        #             qty = order_product.qty
        #             if qty > 1:
        #                 order_product.qty -= 1
        #                 order_product.save()
        #             else:
        #                 self.products.remove(order_product)
        #                 order_product.delete()
        #             self.gift = order_product.product
        #             break

        # –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—É–º–º—ã –∫–æ—Ä–∑–∏–Ω—ã
        if self.delivery_type == self.DELIVERY_TYPE_SELF:
            self.delivery_cost = 0
        elif self.delivery_type == self.DELIVERY_TYPE_SPB:  # spb
            if self.final_price < FREE_DELIVERY:
                self.delivery_cost = DELIVERY_COURIER_COST
            else:
                self.delivery_cost = 0
        elif self.delivery_type == self.DELIVERY_TYPE_CDEKSPB:  # CDEK spb
            if self.final_price < FREE_DELIVERY:
                self.delivery_cost = DELIVERY_CDEK_COST
            else:
                self.delivery_cost = 0
        elif self.delivery_type == self.DELIVERY_TYPE_RU:  # RU
            if self.final_price < FREE_DELIVERY:
                self.delivery_cost = DELIVERY_RU_COST
            else:
                self.delivery_cost = 0
        elif self.delivery_type == self.DELIVERY_TYPE_WORLD:  # World
            self.delivery_cost = DELIVERY_WORLD_COST

        super().save(*args, **kwargs)
